Hello, future internet wizard!

You want to put your amazing program on the internet so everyone can see it, right? And you want it to remember things using a special "brain" called a database. We're going to use two cool tools for this: **Render** and **PostgreSQL**.

Imagine this:
*   **Render** is like a super-fast, always-on computer in the cloud where your program lives.
*   **PostgreSQL** is like a super-organized, giant notebook where your program can write down and read all its important information.

Let's get started, step by step!

---

**Before We Begin (Important Stuff!)**

1.  **Your Code on GitHub:** Render needs to see your program's code. The easiest way is to put it on a website called **GitHub**. If you don't have a GitHub account, make one! Then, you'll need to put your program's files there.
    *   **How to put your code on GitHub (if you haven't already):**
        *   Go to [github.com](https://github.com) and sign up or log in.
        *   Click the big green "New" button (or the "+" sign at the top right and then "New repository").
        *   Give your new project a name (e.g., `iswmc-monitor`).
        *   Click "Create repository".
        *   Now, open your computer's "Terminal" or "Command Prompt" (where you run `node index.js`).
        *   Go to your project folder: `cd /Users/rogerwoolie/Documents/Pers_CScience_2025/iswmc_monitor`
        *   Type these commands, one by one:
            ```bash
            git init
            git add .
            git commit -m "First commit"
            # Replace YOUR_GITHUB_USERNAME and YOUR_REPOSITORY_NAME with your actual ones
            git remote add origin https://github.com/YOUR_GITHUB_USERNAME/YOUR_REPOSITORY_NAME.git
            git branch -M main
            git push -u origin main
            ```
        *   Now your code is safe on GitHub!

2.  **Render Account:** You'll need an account on Render. It's free to start!
    *   Go to [render.com](https://render.com) and sign up or log in.

---

**Part 1: Putting Your Website on Render (Web Service)**

This is like giving your program its own little house on the internet.

1.  **Log in to Render:** Go to [render.com](https://render.com) and log in to your account.
2.  **Start a New Web Service:**
    *   On your Render dashboard, click the big blue button that says **"New"**.
    *   From the menu, choose **"Web Service"**.
3.  **Connect GitHub:**
    *   Render will ask to connect to your GitHub account. Follow the steps to allow it.
    *   Once connected, you'll see a list of your GitHub projects. Find and select the one you just pushed (e.g., `iswmc-monitor`).
4.  **Give Your Service a Name:**
    *   **Name:** Type a name for your website (e.g., `iswmc-monitor-app`).
    *   **Region:** Choose a location closest to you or your users (e.g., "Oregon (US West)").
    *   **Branch:** Keep it as `main`.
    *   **Root Directory:** Leave this empty unless your `package.json` file is inside another folder (it's not for this project).
    *   **Build Command:** This tells Render how to get your program ready. Type: `npm install`
    *   **Start Command:** This tells Render how to run your program. Type: `node index.js`
    *   **Instance Type:** Choose "Free" (it's usually the first option).
5.  **Create Web Service:** Click the blue button that says **"Create Web Service"**.

Render will now start working! It will download your code, install everything it needs, and try to run your program. This might take a few minutes. You'll see a "Deploy Log" showing you what's happening.

---

**Part 2: Setting Up Your Program's Brain (PostgreSQL Database)**

Your program needs a place to store information. PostgreSQL is perfect for this!

1.  **Go Back to Render Dashboard:** Click on the Render logo or "Dashboard" to go back to the main page.
2.  **Start a New PostgreSQL Database:**
    *   Click the big blue button that says **"New"** again.
    *   From the menu, choose **"PostgreSQL"**.
3.  **Give Your Database a Name:**
    *   **Name:** Type a name for your database (e.g., `iswmc-monitor-db`).
    *   **Region:** Choose the *same region* you picked for your Web Service! This makes them talk faster.
    *   **Instance Type:** Choose "Free" (if available).
4.  **Create Database:** Click the blue button that says **"Create Database"**.

Render will now create your database. This also takes a few minutes.

---

**Part 3: Connecting Your Website to Its Brain (Environment Variables)**

Now we need to tell your website where its database is. We do this using something called an "Environment Variable," which is like a secret note your program can read.

1.  **Get Your Database's Secret Address:**
    *   Once your PostgreSQL database is ready (its status will say "Available"), click on its name on your Render dashboard.
    *   On the database's page, look for something called **"External Database URL"**. It will look like a long web address starting with `postgresql://`.
    *   **Copy this entire address!** It's very important.
2.  **Tell Your Web Service the Secret Address:**
    *   Go back to your Web Service (the one you created in Part 1, e.g., `iswmc-monitor-app`). Click on its name on your Render dashboard.
    *   On your Web Service's page, click on the **"Environment"** tab (or sometimes it's called "Environment Variables").
    *   Click **"Add Environment Variable"**.
    *   In the "Key" box, type: `DATABASE_URL` (This is a common name that many programs look for).
    *   In the "Value" box, **paste the long database address** you copied in the previous step.
    *   Click **"Add Secret File"** if you want to store it more securely, but for now, a regular environment variable is fine.
    *   Click **"Save Changes"**.

Your Web Service will now automatically restart. When it starts again, it will read that `DATABASE_URL` secret note and know how to find your PostgreSQL database!

---

**Part 4: Making Your Program Talk to PostgreSQL (Code Changes!)**

**This is the most important part!** Your current program uses a simple file-based database called SQLite. For Render and PostgreSQL, you need to change your program's code to use PostgreSQL instead.

*   **What you need to do:**
    1.  **Install a PostgreSQL Library:** In your project folder on your computer, you'll need to install a special tool that helps Node.js talk to PostgreSQL. Open your Terminal/Command Prompt in your project folder and type:
        ```bash
        npm install pg
        ```
    2.  **Change `index.js`:** You will need to open your `index.js` file (and any other files that talk to the database) and change how it connects. Instead of connecting to a SQLite file, it needs to connect to the `DATABASE_URL` environment variable.
        *   **Example (Conceptual - your code will be different!):**
            Right now, your code might look something like this for SQLite:
            ```javascript
            const sqlite3 = require('sqlite3').verbose();
            const db = new sqlite3.Database('./database/iswmc.db');
            ```
            You will need to change it to use `process.env.DATABASE_URL` with the `pg` library. This is a more advanced step and depends on how your program uses the database. You might need to look up examples of how to use `pg` with Node.js, or consider using a tool like `sequelize` or `knex` if your project grows.

            A very basic example of connecting with `pg`:
            ```javascript
            const { Pool } = require('pg');
            const pool = new Pool({
              connectionString: process.env.DATABASE_URL,
              ssl: {
                rejectUnauthorized: false // This is often needed for Render's SSL
              }
            });

            // Then, instead of db.run, db.get, etc., you'd use pool.query
            // Example:
            // pool.query('SELECT * FROM your_table', (err, res) => {
            //   if (err) {
            //     console.error(err);
            //   } else {
            //     console.log(res.rows);
            //   }
            // });
            ```
            **You MUST update your code to use `process.env.DATABASE_URL` to connect to PostgreSQL.**

    3.  **Push Changes to GitHub Again:** After you change your `index.js` file, you need to save it and push it to GitHub again so Render knows about the new code:
        ```bash
        git add .
        git commit -m "Updated database connection for PostgreSQL"
        git push origin main
        ```
        Render will automatically see these changes and try to deploy your website again!

---

**Troubleshooting (If Things Go Wrong)**

*   **Check the Logs:** On your Render Web Service page, click on the "Logs" tab. This is like a diary of what your program is doing. If there's an error, it will usually show up here.
*   **Environment Variables:** Double-check that you typed `DATABASE_URL` exactly right and that you pasted the correct database address.
*   **Code Changes:** Make sure your `index.js` (and other database files) are correctly updated to use `process.env.DATABASE_URL` and the `pg` library.
*   **Database Status:** Make sure your PostgreSQL database on Render is "Available."

You've got this! It might seem like a lot of steps, but each one is small. Good luck!